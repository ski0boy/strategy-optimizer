import streamlit as st
import numpy as np
import pandas as pd
import random

# === CONFIG ===
account_tiers = {
    "50K": {"profit_target": 3000, "max_loss_limit": 2000},
    "100K": {"profit_target": 6000, "max_loss_limit": 3000},
    "150K": {"profit_target": 9000, "max_loss_limit": 4500},
}

# === MONTE CARLO ENGINE ===
def simulate_one_run(win_rate, risk, rr, tpd, target, mll):
    balance = 0
    max_drawdown = 0
    profit_days = []
    day = 0

    while balance < target and abs(max_drawdown) <= mll:
        day += 1
        day_pl = 0
        for _ in range(tpd):
            is_win = random.random() < win_rate
            result = risk * rr if is_win else -risk
            balance += result
            day_pl += result
            max_drawdown = min(max_drawdown, balance)
            if abs(max_drawdown) > mll or balance >= target:
                break
        profit_days.append(day_pl)
        if abs(max_drawdown) > mll:
            return {"passed": False, "days": day}

    if balance >= target:
        profit_days = [p for p in profit_days if p > 0]
        if len(profit_days) < 2:
            return {"passed": False, "days": day}  # consistency rule
        lowest = min(profit_days)
        if lowest < 0.5 * target:
            return {"passed": False, "days": day}  # consistency rule
        return {"passed": True, "days": day}

    return {"passed": False, "days": day}

# === STREAMLIT UI ===
st.title("ðŸ“Š Topstep Combine Strategy Optimizer")

account = st.selectbox("Select Account Tier", list(account_tiers.keys()))
SIMS = st.slider("Number of Simulations", 100, 2000, 500, step=100)

col1, col2, col3 = st.columns(3)
with col1:
    win_rate = st.slider("Win Rate (%)", 35, 65, 55) / 100
with col2:
    risk_per_trade = st.slider("Risk per Trade ($)", 100, 2000, 300, step=100)
with col3:
    rr = st.slider("Risk:Reward Ratio", 1.0, 3.0, 2.0, step=0.5)

trades_per_day = st.slider("Trades per Day", 1, 10, 2)

if st.button("Run Simulation"):
    with st.spinner("Simulating..."):
        results = []
        for _ in range(SIMS):
            res = simulate_one_run(
                win_rate=win_rate,
                risk=risk_per_trade,
                rr=rr,
                tpd=trades_per_day,
                target=account_tiers[account]["profit_target"],
                mll=account_tiers[account]["max_loss_limit"]
            )
            results.append(res)

        passes = [x for x in results if x["passed"]]
        pass_rate = round(len(passes) / SIMS * 100, 1)
        avg_days = round(np.mean([x["days"] for x in passes]), 1) if passes else None

        st.success(f"âœ… Pass Rate: {pass_rate}%")
        if avg_days:
            st.info(f"ðŸ“… Avg Days to Pass: {avg_days}")

        st.bar_chart(pd.Series([x["days"] for x in passes]).value_counts().sort_index())

